/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IFIDC {
  export type InvestmentStruct = {
    investmentId: BigNumberish;
    amount: BigNumberish;
    investmentDate: BigNumberish;
    yieldStartTime: BigNumberish;
    isSenior: boolean;
    accumulatedYield: BigNumberish;
  };

  export type InvestmentStructOutput = [
    investmentId: bigint,
    amount: bigint,
    investmentDate: bigint,
    yieldStartTime: bigint,
    isSenior: boolean,
    accumulatedYield: bigint
  ] & {
    investmentId: bigint;
    amount: bigint;
    investmentDate: bigint;
    yieldStartTime: bigint;
    isSenior: boolean;
    accumulatedYield: bigint;
  };

  export type InvestorPositionStruct = {
    fidcId: BigNumberish;
    totalAmount: BigNumberish;
    investments: IFIDC.InvestmentStruct[];
  };

  export type InvestorPositionStructOutput = [
    fidcId: bigint,
    totalAmount: bigint,
    investments: IFIDC.InvestmentStructOutput[]
  ] & {
    fidcId: bigint;
    totalAmount: bigint;
    investments: IFIDC.InvestmentStructOutput[];
  };
}

export interface FidcInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "allowance"
      | "anticipation"
      | "approve"
      | "approveInvestor"
      | "approveManager"
      | "approvePayable"
      | "approvedValidator"
      | "asset"
      | "balanceOf"
      | "closeFIDC"
      | "compensationPay"
      | "decimals"
      | "deposit"
      | "drex"
      | "fidcCollateralAmount"
      | "fidcInvested"
      | "fidcInvestors"
      | "fidcPJAddress"
      | "fidcReceivables"
      | "fidcScheduleAmount"
      | "fidcs"
      | "getAllInvestors"
      | "getFIDCInvested"
      | "getFIDCReceivable"
      | "getInvestments"
      | "getInvestorPosition"
      | "getReceivable"
      | "getRoleAdmin"
      | "getUserCollateral"
      | "grantRole"
      | "hasRole"
      | "idFIDC"
      | "initializeFIDC"
      | "invest"
      | "investmentIdCounter"
      | "isActiveFidcInvestor"
      | "isApprovedEmission"
      | "mint"
      | "name"
      | "paused"
      | "recoverERC20"
      | "redeemAllManager"
      | "renounceRole"
      | "resumeFIDC"
      | "revokeInvestor"
      | "revokeManager"
      | "revokePJ"
      | "revokePayable"
      | "revokeRole"
      | "revokeValidator"
      | "seniorInvested"
      | "setRole"
      | "stopFIDC"
      | "supportsInterface"
      | "symbol"
      | "togglePause"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "userCollateral"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Anticipation"
      | "Approval"
      | "CompensationPaid"
      | "CompensationProcessed"
      | "Deposit"
      | "EmergencyPaused"
      | "FIDCApprovedPayable"
      | "FIDCClosed"
      | "FIDCCreated"
      | "FIDCRedemption"
      | "FIDCStatusChanged"
      | "InvestmentTransferred"
      | "ManagerRedeemAll"
      | "NewInvestmentRegistered"
      | "PJApprovalChanged"
      | "PJRevoked"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "ScheduleAmountChanged"
      | "TokenRecovered"
      | "Transfer"
      | "VaultInitialized"
      | "Withdraw"
      | "YieldPaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "anticipation",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveInvestor",
    values: [AddressLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveManager",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePayable",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedValidator",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFIDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compensationPay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "drex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fidcCollateralAmount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fidcInvested",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fidcInvestors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fidcPJAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fidcReceivables",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fidcScheduleAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fidcs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getAllInvestors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFIDCInvested",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFIDCReceivable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestments",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorPosition",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceivable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollateral",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "idFIDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeFIDC",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveFidcInvestor",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedEmission",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllManager",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeFIDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeInvestor",
    values: [AddressLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeManager",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePJ",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePayable",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeValidator",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "seniorInvested",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRole",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stopFIDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "togglePause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateral",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeFIDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compensationPay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fidcCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fidcInvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fidcInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fidcPJAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fidcReceivables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fidcScheduleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fidcs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFIDCInvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFIDCReceivable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceivable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idFIDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeFIDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveFidcInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resumeFIDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokePJ", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokePayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorInvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopFIDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AnticipationEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    requester: AddressLike,
    amount: BigNumberish,
    collateral: AddressLike,
    collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    fidcId: bigint,
    requester: string,
    amount: bigint,
    collateral: string,
    collateralAmount: bigint
  ];
  export interface OutputObject {
    fidcId: bigint;
    requester: string;
    amount: bigint;
    collateral: string;
    collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompensationPaidEvent {
  export type InputTuple = [fidcId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [fidcId: bigint, amount: bigint];
  export interface OutputObject {
    fidcId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompensationProcessedEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    payer: AddressLike,
    amount: BigNumberish,
    collateralToken: AddressLike,
    collateralAmount: BigNumberish,
    isCollateralPayment: boolean
  ];
  export type OutputTuple = [
    fidcId: bigint,
    payer: string,
    amount: bigint,
    collateralToken: string,
    collateralAmount: bigint,
    isCollateralPayment: boolean
  ];
  export interface OutputObject {
    fidcId: bigint;
    payer: string;
    amount: bigint;
    collateralToken: string;
    collateralAmount: bigint;
    isCollateralPayment: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPausedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FIDCApprovedPayableEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    payableAddress: AddressLike,
    status: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    fidcId: bigint,
    payableAddress: string,
    status: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    fidcId: bigint;
    payableAddress: string;
    status: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FIDCClosedEvent {
  export type InputTuple = [fidcId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [fidcId: bigint, timestamp: bigint];
  export interface OutputObject {
    fidcId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FIDCCreatedEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    manager: AddressLike,
    contractReceivable: AddressLike
  ];
  export type OutputTuple = [
    fidcId: bigint,
    manager: string,
    contractReceivable: string
  ];
  export interface OutputObject {
    fidcId: bigint;
    manager: string;
    contractReceivable: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FIDCRedemptionEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    investor: AddressLike,
    investmentAmount: BigNumberish,
    grossYield: BigNumberish,
    netYield: BigNumberish,
    managerFee: BigNumberish,
    quotasBurned: BigNumberish,
    isSenior: boolean,
    investmentDate: BigNumberish,
    redemptionDate: BigNumberish
  ];
  export type OutputTuple = [
    fidcId: bigint,
    investor: string,
    investmentAmount: bigint,
    grossYield: bigint,
    netYield: bigint,
    managerFee: bigint,
    quotasBurned: bigint,
    isSenior: boolean,
    investmentDate: bigint,
    redemptionDate: bigint
  ];
  export interface OutputObject {
    fidcId: bigint;
    investor: string;
    investmentAmount: bigint;
    grossYield: bigint;
    netYield: bigint;
    managerFee: bigint;
    quotasBurned: bigint;
    isSenior: boolean;
    investmentDate: bigint;
    redemptionDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FIDCStatusChangedEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    fidcId: bigint,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    fidcId: bigint;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentTransferredEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    fidcId: bigint,
    from: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    fidcId: bigint;
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerRedeemAllEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    manager: AddressLike,
    totalProcessed: BigNumberish
  ];
  export type OutputTuple = [
    fidcId: bigint,
    manager: string,
    totalProcessed: bigint
  ];
  export interface OutputObject {
    fidcId: bigint;
    manager: string;
    totalProcessed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewInvestmentRegisteredEvent {
  export type InputTuple = [
    investor: AddressLike,
    fidcId: BigNumberish,
    investmentId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    investor: string,
    fidcId: bigint,
    investmentId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    investor: string;
    fidcId: bigint;
    investmentId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PJApprovalChangedEvent {
  export type InputTuple = [
    pj: AddressLike,
    fidcId: BigNumberish,
    approved: boolean
  ];
  export type OutputTuple = [pj: string, fidcId: bigint, approved: boolean];
  export interface OutputObject {
    pj: string;
    fidcId: bigint;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PJRevokedEvent {
  export type InputTuple = [pj: AddressLike, fidcId: BigNumberish];
  export type OutputTuple = [pj: string, fidcId: bigint];
  export interface OutputObject {
    pj: string;
    fidcId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScheduleAmountChangedEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    oldAmount: BigNumberish,
    newAmount: BigNumberish
  ];
  export type OutputTuple = [
    fidcId: bigint,
    oldAmount: bigint,
    newAmount: bigint
  ];
  export interface OutputObject {
    fidcId: bigint;
    oldAmount: bigint;
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRecoveredEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultInitializedEvent {
  export type InputTuple = [drex: AddressLike, owner: AddressLike];
  export type OutputTuple = [drex: string, owner: string];
  export interface OutputObject {
    drex: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldPaidEvent {
  export type InputTuple = [
    fidcId: BigNumberish,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [fidcId: bigint, investor: string, amount: bigint];
  export interface OutputObject {
    fidcId: bigint;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Fidc extends BaseContract {
  connect(runner?: ContractRunner | null): Fidc;
  waitForDeployment(): Promise<this>;

  interface: FidcInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  anticipation: TypedContractMethod<
    [_amount: BigNumberish, _collateral: AddressLike, _fidcId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approveInvestor: TypedContractMethod<
    [_investor: AddressLike[], _type: BigNumberish, _fidcId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveManager: TypedContractMethod<
    [_manager: AddressLike[]],
    [void],
    "nonpayable"
  >;

  approvePayable: TypedContractMethod<
    [_payable: AddressLike[]],
    [void],
    "nonpayable"
  >;

  approvedValidator: TypedContractMethod<
    [_validator: AddressLike[]],
    [void],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  closeFIDC: TypedContractMethod<[_fidcId: BigNumberish], [void], "nonpayable">;

  compensationPay: TypedContractMethod<
    [_fidcId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  drex: TypedContractMethod<[], [string], "view">;

  fidcCollateralAmount: TypedContractMethod<
    [fidicId: BigNumberish, tokenCollateral: AddressLike],
    [bigint],
    "view"
  >;

  fidcInvested: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  fidcInvestors: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  fidcPJAddress: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  fidcReceivables: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  fidcScheduleAmount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  fidcs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        manager: string;
        validator: string;
        payableAddress: string;
        fee: bigint;
        tokenReceivable: string;
        amount: bigint;
        invested: bigint;
        valid: boolean;
        startDate: bigint;
        endDate: bigint;
        status: bigint;
        annualYield: bigint;
        gracePeriod: bigint;
        seniorSpread: bigint;
        vault: string;
      }
    ],
    "view"
  >;

  getAllInvestors: TypedContractMethod<
    [_fidcId: BigNumberish],
    [
      [string[], boolean[], bigint[]] & {
        investors: string[];
        isSenior: boolean[];
        amounts: bigint[];
      }
    ],
    "view"
  >;

  getFIDCInvested: TypedContractMethod<
    [fidcId: BigNumberish],
    [bigint],
    "view"
  >;

  getFIDCReceivable: TypedContractMethod<
    [_fidcId: BigNumberish],
    [string],
    "view"
  >;

  getFIDCTotalInvested: TypedContractMethod<
    [_fidcId: BigNumberish],
    [number],
    "view"
  >;

  getInvestments: TypedContractMethod<
    [_investor: AddressLike, _fidcId: BigNumberish],
    [IFIDC.InvestmentStructOutput[]],
    "view"
  >;

  getInvestorPosition: TypedContractMethod<
    [_investor: AddressLike, _fidcId: BigNumberish],
    [IFIDC.InvestorPositionStructOutput],
    "view"
  >;

  getReceivable: TypedContractMethod<[fidcId: BigNumberish], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserCollateral: TypedContractMethod<
    [_fidcId: BigNumberish, _user: AddressLike],
    [string],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  idFIDC: TypedContractMethod<[], [bigint], "view">;

  initializeFIDC: TypedContractMethod<
    [
      _manager: AddressLike,
      _validator: AddressLike,
      _payable: AddressLike,
      _fee: BigNumberish,
      _annualYield: BigNumberish,
      _gracePeriod: BigNumberish,
      _seniorSpread: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  invest: TypedContractMethod<
    [_fidcId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  investmentIdCounter: TypedContractMethod<[], [bigint], "view">;

  isActiveFidcInvestor: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedEmission: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  recoverERC20: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemAllManager: TypedContractMethod<
    [_fidcId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  resumeFIDC: TypedContractMethod<
    [_fidcId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeInvestor: TypedContractMethod<
    [_investor: AddressLike[], _type: BigNumberish, _fidcId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeManager: TypedContractMethod<
    [_manager: AddressLike[]],
    [void],
    "nonpayable"
  >;

  revokePJ: TypedContractMethod<
    [_pjs: AddressLike[], _fidcIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  revokePayable: TypedContractMethod<
    [_payable: AddressLike[]],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeValidator: TypedContractMethod<
    [_validator: AddressLike[]],
    [void],
    "nonpayable"
  >;

  seniorInvested: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  setRole: TypedContractMethod<
    [_role: BytesLike, _addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  stopFIDC: TypedContractMethod<[_fidcId: BigNumberish], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  togglePause: TypedContractMethod<[_pause: boolean], [void], "nonpayable">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  userCollateral: TypedContractMethod<
    [fidicId: BigNumberish, user: AddressLike],
    [string],
    "view"
  >;

  withdraw: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "anticipation"
  ): TypedContractMethod<
    [_amount: BigNumberish, _collateral: AddressLike, _fidcId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveInvestor"
  ): TypedContractMethod<
    [_investor: AddressLike[], _type: BigNumberish, _fidcId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveManager"
  ): TypedContractMethod<[_manager: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvePayable"
  ): TypedContractMethod<[_payable: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedValidator"
  ): TypedContractMethod<[_validator: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "closeFIDC"
  ): TypedContractMethod<[_fidcId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "compensationPay"
  ): TypedContractMethod<
    [_fidcId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "drex"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fidcCollateralAmount"
  ): TypedContractMethod<
    [fidicId: BigNumberish, tokenCollateral: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fidcInvested"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fidcInvestors"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "fidcPJAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "fidcReceivables"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "fidcScheduleAmount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fidcs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        manager: string;
        validator: string;
        payableAddress: string;
        fee: bigint;
        tokenReceivable: string;
        amount: bigint;
        invested: bigint;
        valid: boolean;
        startDate: bigint;
        endDate: bigint;
        status: bigint;
        annualYield: bigint;
        gracePeriod: bigint;
        seniorSpread: bigint;
        vault: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllInvestors"
  ): TypedContractMethod<
    [_fidcId: BigNumberish],
    [
      [string[], boolean[], bigint[]] & {
        investors: string[];
        isSenior: boolean[];
        amounts: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFIDCInvested"
  ): TypedContractMethod<[fidcId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFIDCReceivable"
  ): TypedContractMethod<[_fidcId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getInvestments"
  ): TypedContractMethod<
    [_investor: AddressLike, _fidcId: BigNumberish],
    [IFIDC.InvestmentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInvestorPosition"
  ): TypedContractMethod<
    [_investor: AddressLike, _fidcId: BigNumberish],
    [IFIDC.InvestorPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReceivable"
  ): TypedContractMethod<[fidcId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserCollateral"
  ): TypedContractMethod<
    [_fidcId: BigNumberish, _user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "idFIDC"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializeFIDC"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _validator: AddressLike,
      _payable: AddressLike,
      _fee: BigNumberish,
      _annualYield: BigNumberish,
      _gracePeriod: BigNumberish,
      _seniorSpread: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<
    [_fidcId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "investmentIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isActiveFidcInvestor"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedEmission"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemAllManager"
  ): TypedContractMethod<[_fidcId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resumeFIDC"
  ): TypedContractMethod<[_fidcId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeInvestor"
  ): TypedContractMethod<
    [_investor: AddressLike[], _type: BigNumberish, _fidcId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeManager"
  ): TypedContractMethod<[_manager: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePJ"
  ): TypedContractMethod<
    [_pjs: AddressLike[], _fidcIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokePayable"
  ): TypedContractMethod<[_payable: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeValidator"
  ): TypedContractMethod<[_validator: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "seniorInvested"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setRole"
  ): TypedContractMethod<
    [_role: BytesLike, _addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stopFIDC"
  ): TypedContractMethod<[_fidcId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "togglePause"
  ): TypedContractMethod<[_pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userCollateral"
  ): TypedContractMethod<
    [fidicId: BigNumberish, user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Anticipation"
  ): TypedContractEvent<
    AnticipationEvent.InputTuple,
    AnticipationEvent.OutputTuple,
    AnticipationEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CompensationPaid"
  ): TypedContractEvent<
    CompensationPaidEvent.InputTuple,
    CompensationPaidEvent.OutputTuple,
    CompensationPaidEvent.OutputObject
  >;
  getEvent(
    key: "CompensationProcessed"
  ): TypedContractEvent<
    CompensationProcessedEvent.InputTuple,
    CompensationProcessedEvent.OutputTuple,
    CompensationProcessedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPaused"
  ): TypedContractEvent<
    EmergencyPausedEvent.InputTuple,
    EmergencyPausedEvent.OutputTuple,
    EmergencyPausedEvent.OutputObject
  >;
  getEvent(
    key: "FIDCApprovedPayable"
  ): TypedContractEvent<
    FIDCApprovedPayableEvent.InputTuple,
    FIDCApprovedPayableEvent.OutputTuple,
    FIDCApprovedPayableEvent.OutputObject
  >;
  getEvent(
    key: "FIDCClosed"
  ): TypedContractEvent<
    FIDCClosedEvent.InputTuple,
    FIDCClosedEvent.OutputTuple,
    FIDCClosedEvent.OutputObject
  >;
  getEvent(
    key: "FIDCCreated"
  ): TypedContractEvent<
    FIDCCreatedEvent.InputTuple,
    FIDCCreatedEvent.OutputTuple,
    FIDCCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FIDCRedemption"
  ): TypedContractEvent<
    FIDCRedemptionEvent.InputTuple,
    FIDCRedemptionEvent.OutputTuple,
    FIDCRedemptionEvent.OutputObject
  >;
  getEvent(
    key: "FIDCStatusChanged"
  ): TypedContractEvent<
    FIDCStatusChangedEvent.InputTuple,
    FIDCStatusChangedEvent.OutputTuple,
    FIDCStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentTransferred"
  ): TypedContractEvent<
    InvestmentTransferredEvent.InputTuple,
    InvestmentTransferredEvent.OutputTuple,
    InvestmentTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ManagerRedeemAll"
  ): TypedContractEvent<
    ManagerRedeemAllEvent.InputTuple,
    ManagerRedeemAllEvent.OutputTuple,
    ManagerRedeemAllEvent.OutputObject
  >;
  getEvent(
    key: "NewInvestmentRegistered"
  ): TypedContractEvent<
    NewInvestmentRegisteredEvent.InputTuple,
    NewInvestmentRegisteredEvent.OutputTuple,
    NewInvestmentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PJApprovalChanged"
  ): TypedContractEvent<
    PJApprovalChangedEvent.InputTuple,
    PJApprovalChangedEvent.OutputTuple,
    PJApprovalChangedEvent.OutputObject
  >;
  getEvent(
    key: "PJRevoked"
  ): TypedContractEvent<
    PJRevokedEvent.InputTuple,
    PJRevokedEvent.OutputTuple,
    PJRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ScheduleAmountChanged"
  ): TypedContractEvent<
    ScheduleAmountChangedEvent.InputTuple,
    ScheduleAmountChangedEvent.OutputTuple,
    ScheduleAmountChangedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRecovered"
  ): TypedContractEvent<
    TokenRecoveredEvent.InputTuple,
    TokenRecoveredEvent.OutputTuple,
    TokenRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "VaultInitialized"
  ): TypedContractEvent<
    VaultInitializedEvent.InputTuple,
    VaultInitializedEvent.OutputTuple,
    VaultInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "YieldPaid"
  ): TypedContractEvent<
    YieldPaidEvent.InputTuple,
    YieldPaidEvent.OutputTuple,
    YieldPaidEvent.OutputObject
  >;

  filters: {
    "Anticipation(uint256,address,uint256,address,uint256)": TypedContractEvent<
      AnticipationEvent.InputTuple,
      AnticipationEvent.OutputTuple,
      AnticipationEvent.OutputObject
    >;
    Anticipation: TypedContractEvent<
      AnticipationEvent.InputTuple,
      AnticipationEvent.OutputTuple,
      AnticipationEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CompensationPaid(uint256,uint256)": TypedContractEvent<
      CompensationPaidEvent.InputTuple,
      CompensationPaidEvent.OutputTuple,
      CompensationPaidEvent.OutputObject
    >;
    CompensationPaid: TypedContractEvent<
      CompensationPaidEvent.InputTuple,
      CompensationPaidEvent.OutputTuple,
      CompensationPaidEvent.OutputObject
    >;

    "CompensationProcessed(uint256,address,uint256,address,uint256,bool)": TypedContractEvent<
      CompensationProcessedEvent.InputTuple,
      CompensationProcessedEvent.OutputTuple,
      CompensationProcessedEvent.OutputObject
    >;
    CompensationProcessed: TypedContractEvent<
      CompensationProcessedEvent.InputTuple,
      CompensationProcessedEvent.OutputTuple,
      CompensationProcessedEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EmergencyPaused(bool)": TypedContractEvent<
      EmergencyPausedEvent.InputTuple,
      EmergencyPausedEvent.OutputTuple,
      EmergencyPausedEvent.OutputObject
    >;
    EmergencyPaused: TypedContractEvent<
      EmergencyPausedEvent.InputTuple,
      EmergencyPausedEvent.OutputTuple,
      EmergencyPausedEvent.OutputObject
    >;

    "FIDCApprovedPayable(uint256,address,uint8,uint256)": TypedContractEvent<
      FIDCApprovedPayableEvent.InputTuple,
      FIDCApprovedPayableEvent.OutputTuple,
      FIDCApprovedPayableEvent.OutputObject
    >;
    FIDCApprovedPayable: TypedContractEvent<
      FIDCApprovedPayableEvent.InputTuple,
      FIDCApprovedPayableEvent.OutputTuple,
      FIDCApprovedPayableEvent.OutputObject
    >;

    "FIDCClosed(uint256,uint256)": TypedContractEvent<
      FIDCClosedEvent.InputTuple,
      FIDCClosedEvent.OutputTuple,
      FIDCClosedEvent.OutputObject
    >;
    FIDCClosed: TypedContractEvent<
      FIDCClosedEvent.InputTuple,
      FIDCClosedEvent.OutputTuple,
      FIDCClosedEvent.OutputObject
    >;

    "FIDCCreated(uint256,address,address)": TypedContractEvent<
      FIDCCreatedEvent.InputTuple,
      FIDCCreatedEvent.OutputTuple,
      FIDCCreatedEvent.OutputObject
    >;
    FIDCCreated: TypedContractEvent<
      FIDCCreatedEvent.InputTuple,
      FIDCCreatedEvent.OutputTuple,
      FIDCCreatedEvent.OutputObject
    >;

    "FIDCRedemption(uint256,address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256)": TypedContractEvent<
      FIDCRedemptionEvent.InputTuple,
      FIDCRedemptionEvent.OutputTuple,
      FIDCRedemptionEvent.OutputObject
    >;
    FIDCRedemption: TypedContractEvent<
      FIDCRedemptionEvent.InputTuple,
      FIDCRedemptionEvent.OutputTuple,
      FIDCRedemptionEvent.OutputObject
    >;

    "FIDCStatusChanged(uint256,uint8,uint8)": TypedContractEvent<
      FIDCStatusChangedEvent.InputTuple,
      FIDCStatusChangedEvent.OutputTuple,
      FIDCStatusChangedEvent.OutputObject
    >;
    FIDCStatusChanged: TypedContractEvent<
      FIDCStatusChangedEvent.InputTuple,
      FIDCStatusChangedEvent.OutputTuple,
      FIDCStatusChangedEvent.OutputObject
    >;

    "InvestmentTransferred(uint256,address,address,uint256)": TypedContractEvent<
      InvestmentTransferredEvent.InputTuple,
      InvestmentTransferredEvent.OutputTuple,
      InvestmentTransferredEvent.OutputObject
    >;
    InvestmentTransferred: TypedContractEvent<
      InvestmentTransferredEvent.InputTuple,
      InvestmentTransferredEvent.OutputTuple,
      InvestmentTransferredEvent.OutputObject
    >;

    "ManagerRedeemAll(uint256,address,uint256)": TypedContractEvent<
      ManagerRedeemAllEvent.InputTuple,
      ManagerRedeemAllEvent.OutputTuple,
      ManagerRedeemAllEvent.OutputObject
    >;
    ManagerRedeemAll: TypedContractEvent<
      ManagerRedeemAllEvent.InputTuple,
      ManagerRedeemAllEvent.OutputTuple,
      ManagerRedeemAllEvent.OutputObject
    >;

    "NewInvestmentRegistered(address,uint256,uint256,uint256)": TypedContractEvent<
      NewInvestmentRegisteredEvent.InputTuple,
      NewInvestmentRegisteredEvent.OutputTuple,
      NewInvestmentRegisteredEvent.OutputObject
    >;
    NewInvestmentRegistered: TypedContractEvent<
      NewInvestmentRegisteredEvent.InputTuple,
      NewInvestmentRegisteredEvent.OutputTuple,
      NewInvestmentRegisteredEvent.OutputObject
    >;

    "PJApprovalChanged(address,uint256,bool)": TypedContractEvent<
      PJApprovalChangedEvent.InputTuple,
      PJApprovalChangedEvent.OutputTuple,
      PJApprovalChangedEvent.OutputObject
    >;
    PJApprovalChanged: TypedContractEvent<
      PJApprovalChangedEvent.InputTuple,
      PJApprovalChangedEvent.OutputTuple,
      PJApprovalChangedEvent.OutputObject
    >;

    "PJRevoked(address,uint256)": TypedContractEvent<
      PJRevokedEvent.InputTuple,
      PJRevokedEvent.OutputTuple,
      PJRevokedEvent.OutputObject
    >;
    PJRevoked: TypedContractEvent<
      PJRevokedEvent.InputTuple,
      PJRevokedEvent.OutputTuple,
      PJRevokedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ScheduleAmountChanged(uint256,uint256,uint256)": TypedContractEvent<
      ScheduleAmountChangedEvent.InputTuple,
      ScheduleAmountChangedEvent.OutputTuple,
      ScheduleAmountChangedEvent.OutputObject
    >;
    ScheduleAmountChanged: TypedContractEvent<
      ScheduleAmountChangedEvent.InputTuple,
      ScheduleAmountChangedEvent.OutputTuple,
      ScheduleAmountChangedEvent.OutputObject
    >;

    "TokenRecovered(address,uint256)": TypedContractEvent<
      TokenRecoveredEvent.InputTuple,
      TokenRecoveredEvent.OutputTuple,
      TokenRecoveredEvent.OutputObject
    >;
    TokenRecovered: TypedContractEvent<
      TokenRecoveredEvent.InputTuple,
      TokenRecoveredEvent.OutputTuple,
      TokenRecoveredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "VaultInitialized(address,address)": TypedContractEvent<
      VaultInitializedEvent.InputTuple,
      VaultInitializedEvent.OutputTuple,
      VaultInitializedEvent.OutputObject
    >;
    VaultInitialized: TypedContractEvent<
      VaultInitializedEvent.InputTuple,
      VaultInitializedEvent.OutputTuple,
      VaultInitializedEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "YieldPaid(uint256,address,uint256)": TypedContractEvent<
      YieldPaidEvent.InputTuple,
      YieldPaidEvent.OutputTuple,
      YieldPaidEvent.OutputObject
    >;
    YieldPaid: TypedContractEvent<
      YieldPaidEvent.InputTuple,
      YieldPaidEvent.OutputTuple,
      YieldPaidEvent.OutputObject
    >;
  };
}
